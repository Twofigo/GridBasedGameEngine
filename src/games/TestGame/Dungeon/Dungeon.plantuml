@startuml

title __DUNGEON's Class Diagram__\n

  namespace games.TestGame {
    namespace Dungeon {
      class games.TestGame.Dungeon.Attack {
          + action()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      abstract class games.TestGame.Dungeon.Creature {
          # description : String
          # health : int
          # maxHealth : int
          # name : String
          # texturePath : String
          + Creature()
          {abstract} + getDamage()
          + getDescription()
          + getHealth()
          + getMaxHealth()
          + getName()
          + punch()
          + render()
          + setInfo()
          # setHealth()
          # setMaxHealth()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      interface games.TestGame.Dungeon.Description {
          {abstract} + getDescription()
          {abstract} + getName()
          {abstract} + setInfo()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      class games.TestGame.Dungeon.DungeonMaster {
          - difficulty : int
          - mouseDragged : boolean
          + DungeonMaster()
          + getDifficulty()
          + getInventory()
          + getLevel()
          + getPlayer()
          + goDeeper()
          + isVisable()
          + keyPressed()
          {static} + main()
          + mouseClicked()
          + mouseDragged()
          + mouseMoved()
          + mousePressed()
          + mouseReleased()
          + mouseWheelMoved()
          + setDifficulty()
          + update()
          - changeToDungeonView()
          - changeToInventoryView()
          - createCreatureList()
          - createItemList()
          - generateFloor()
          - loadTextures()
          - populateFloor()
          - setupDungeonView()
          - setupInventory()
          - setupInventoryView()
          - sightRay()
          - updateVisibility()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      class games.TestGame.Dungeon.DungeonRenderer {
          + DungeonRenderer()
          + draw()
          + getDiscoveredMask()
          + getVisibilityMask()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      class games.TestGame.Dungeon.DungeonView {
          + DungeonView()
          + getDungeonRenderer()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      class games.TestGame.Dungeon.Monster {
          - behaviour : int
          - damage : int
          + Monster()
          + clone()
          + clone()
          + getDamage()
          + update()
          + update()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      interface games.TestGame.Dungeon.MoveInto {
          {abstract} + moveInto()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      class games.TestGame.Dungeon.MoveTo {
          + action()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      class games.TestGame.Dungeon.Player {
          {static} + BOOTS : int
          {static} + CAPE : int
          {static} + CHEST : int
          {static} + HAT : int
          {static} + LEGS : int
          {static} + SHIELD : int
          {static} + WEAPON : int
          - endurance : int
          - enduranceProg : int
          - equipment : Equipable[]
          - intelligence : int
          - intelligenceProg : int
          - strength : int
          - strengthProg : int
          + Player()
          + clone()
          + clone()
          + consume()
          + equip()
          + getArmorRating()
          + getDamage()
          + getEndurance()
          + getIntelligence()
          + getStrength()
          + getWeapon()
          + progressEndurance()
          + progressIntelligence()
          + progressStrength()
          + render()
          + unEquip()
          + update()
          # getArmor()
          # getEquipment()
      }
    }
  }
  

  namespace games.TestGame {
    namespace Dungeon {
      class games.TestGame.Dungeon.StatsRenderer {
          - f : Font
          + StatsRenderer()
          + draw()
          + findFont()
          + setFocusEntity()
          - printLine()
      }
    }
  }
  

  games.TestGame.Dungeon.Attack .up.|> engine.Interaction
  games.TestGame.Dungeon.Creature .up.|> games.TestGame.Dungeon.Description
  games.TestGame.Dungeon.Creature -up-|> engine.Entity
  games.TestGame.Dungeon.DungeonMaster -up-|> engine.PuppetMaster
  games.TestGame.Dungeon.DungeonMaster o-- games.TestGame.Dungeon.Inventory.MoveItem : MOVEITEM
  games.TestGame.Dungeon.DungeonMaster o-- games.TestGame.Dungeon.MoveTo : MOVETO
  games.TestGame.Dungeon.DungeonMaster o-- games.TestGame.Dungeon.Inventory.Pickup : PICKUP
  games.TestGame.Dungeon.DungeonMaster o-- games.TestGame.Dungeon.DungeonView : dungeonView
  games.TestGame.Dungeon.DungeonMaster o-- games.TestGame.Dungeon.Inventory.Inventory : inventory
  games.TestGame.Dungeon.DungeonMaster o-- games.TestGame.Dungeon.Inventory.Item : inventoryPickedUpItem
  games.TestGame.Dungeon.DungeonMaster o-- engine.Graphics.BoardView : inventoryView
  games.TestGame.Dungeon.DungeonMaster o-- games.TestGame.Dungeon.World.Level : level
  games.TestGame.Dungeon.DungeonMaster o-- games.TestGame.Dungeon.Player : player
  games.TestGame.Dungeon.DungeonMaster o-- games.TestGame.Dungeon.StatsRenderer : statsRenderer
  games.TestGame.Dungeon.DungeonRenderer -up-|> engine.Graphics.BoardRenderer
  games.TestGame.Dungeon.DungeonRenderer o-- engine.Graphics.BinaryMask : discovered
  games.TestGame.Dungeon.DungeonRenderer o-- engine.Graphics.BinaryMask : visibility
  games.TestGame.Dungeon.DungeonView -up-|> engine.Graphics.CanvasView
  games.TestGame.Dungeon.Monster -up-|> games.TestGame.Dungeon.Creature
  games.TestGame.Dungeon.Monster o-- engine.tools.Dijkstra : path
  games.TestGame.Dungeon.MoveTo .up.|> engine.Interaction
  games.TestGame.Dungeon.Player -up-|> games.TestGame.Dungeon.Creature
  games.TestGame.Dungeon.Player o-- games.TestGame.Dungeon.Inventory.Consumable : consumable
  games.TestGame.Dungeon.StatsRenderer -up-|> engine.Graphics.Renderer
  games.TestGame.Dungeon.StatsRenderer o-- engine.Tile : t


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
